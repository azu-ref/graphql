"valida los tipos de nivel"
enum Level{
    principiante    
    intermedio
    avanzado
}

type Course {
    _id: ID!
    title: String!
    teacher: String
    description: String!
    topic: String
    people: [Student]
    level: Level
}

interface Person{
    _id: ID!
    name: String!
    email: String!
}

type Student implements Person {
    _id: ID!
    name: String!
    email: String!
    avatar: String
}

type Monitor implements Person {
    _id: ID!
    name: String!
    email: String!
    phone: String
}


type Query {
        "Devuelve todos los cursos"
        getCourses: [Course]
        "Devuelve un curso"
        getCourse(_id: ID!): Course
        
        "Devuelve todos los estudiantes"
        getPersons: [Person]
        "Devuelve un estudiante"
        getPerson(_id: ID!): Person
}

input CourseInput {
    title: String!
    teacher: String
    description: String!
    topic: String
    level: Level
}

input CourseEditInput {
    title: String
    teacher: String
    description: String
    topic: String
}

input PersonInput {
    name: String!
    email: String!
    phone: String
    avatar: String
}

input PersonEditInput {
    name: String
    email: String
    phone: String
    avatar: String
}

type Mutation {
    "crear un curso"
    createCourse(input: CourseInput!): Course
    "edita un curso"
    editCourse(_id: ID!, input: CourseEditInput!): Course
    
    "crear un estudiante"
    createPerson(input: PersonInput!): Person
    "edita un estudiante"
    editPerson(_id: ID!, input: PersonEditInput!): Person

    "Agrega una persona al curso"
    addPerson(courseID: ID!, personID: ID!): Course 
    
}